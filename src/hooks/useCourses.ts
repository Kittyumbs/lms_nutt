import {
  collection,
  query,
  orderBy,
  where,
  getDocs,
  addDoc,
  updateDoc,
  doc,
  // deleteDoc,
  onSnapshot,
  serverTimestamp,
  // limit,
  // startAfter,
} from 'firebase/firestore';
import { useState, useEffect, useCallback } from 'react';
// import { v4 as uuidv4 } from 'uuid';

import { db } from '../lib/firebase'; // Import the Firestore instance

export type CourseStatus = 'Draft' | 'Published' | 'Archived';

export interface Course {
  id: string;
  title: string;
  desc?: string;
  coverUrl?: string;
  tags: string[];
  status: CourseStatus;
  ownerUid?: string;
  createdAt?: number;
  updatedAt?: number;
}

const COURSES_COLLECTION = 'courses';

export function useCourses(params: { search?: string; tags?: string[]; status?: 'All' | CourseStatus; pageSize?: number }): {
  items: Course[]; loading: boolean; hasMore: boolean; loadMore: () => void; refresh: () => void;
} {
  const { search, tags, status } = params;
  const [items, setItems] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [hasMore, setHasMore] = useState(false);
  const [refreshKey, setRefreshKey] = useState(0); // To force refresh

  const refresh = useCallback(() => {
    setRefreshKey((prev) => prev + 1);
  }, []);

  useEffect(() => {
    setLoading(true);
    let q = query(collection(db, COURSES_COLLECTION), orderBy('createdAt', 'desc'));

    if (tags && tags.length > 0) {
      q = query(q, where('tags', 'array-contains-any', tags));
    }

    if (status && status !== 'All') {
      q = query(q, where('status', '==', status));
    }

    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const fetchedCourses: Course[] = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as Course[];

      // Client-side filtering for search (Firestore doesn't support full-text search directly)
      let filteredCourses = fetchedCourses;
      if (search) {
        const lowerSearch = search.toLowerCase();
        filteredCourses = fetchedCourses.filter(
          (course) =>
            course.title.toLowerCase().includes(lowerSearch) ||
            course.desc?.toLowerCase().includes(lowerSearch) ||
            course.tags.some((tag) => tag.toLowerCase().includes(lowerSearch))
        );
      }

      setItems(filteredCourses);
      setLoading(false);
      setHasMore(false); // With onSnapshot, we fetch all matching, so no "more" to load in this simplified version
    }, (error) => {
      console.error('Error fetching courses:', error);
      setLoading(false);
      // Handle error appropriately
    });

    // Cleanup function to unsubscribe from real-time updates
    return () => unsubscribe();
  }, [search, tags, status, refreshKey]); // Re-run effect when filters or refreshKey change

  // loadMore is not directly applicable with simple onSnapshot, but keep for interface
  const loadMore = useCallback(() => {
    console.log('Load more not implemented with current onSnapshot setup.');
  }, []);

  return { items, loading, hasMore, loadMore, refresh };
}

export async function createCourse(input: Omit<Course, 'id' | 'createdAt' | 'updatedAt'>): Promise<Course> {
  try {
    // Import getAuth to get current user
    const { getAuth } = await import('firebase/auth');
    const auth = getAuth();
    const currentUser = auth.currentUser;

    if (!currentUser) {
      throw new Error('User not authenticated');
    }

    const docRef = await addDoc(collection(db, COURSES_COLLECTION), {
      ...input,
      ownerUid: currentUser.uid,  // Set owner to current user
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
      tags: input.tags || [],
      status: input.status || 'Draft',
    });
    // Return the created course with the Firestore-generated ID and server timestamps
    // Note: serverTimestamp() is an object, so we use Date.now() for immediate client-side display
    return { id: docRef.id, ...input, ownerUid: currentUser.uid, createdAt: Date.now(), updatedAt: Date.now() } as Course;
  } catch (error) {
    console.error('Error creating course:', error);
    throw error;
  }
}

export async function updateCourse(id: string, patch: Partial<Course>): Promise<void> {
  try {
    const courseRef = doc(db, COURSES_COLLECTION, id);
    await updateDoc(courseRef, {
      ...patch,
      updatedAt: serverTimestamp(),
    });
  } catch (error) {
    console.error('Error updating course:', error);
    throw error;
  }
}

export async function duplicateCourse(id: string): Promise<Course> {
  try {
    const originalDoc = await getDocs(query(collection(db, COURSES_COLLECTION), where('id', '==', id)));
    if (originalDoc.empty) {
      throw new Error('Course not found for duplication');
    }
    const courseToDuplicate = originalDoc.docs[0].data() as Course;

    // Omit id from courseToDuplicate before creating new input
    const { id: _originalId, ...restOfCourse } = courseToDuplicate;
    // _originalId is intentionally unused as we generate a new ID
    const duplicatedCourseInput: Omit<Course, 'id' | 'createdAt' | 'updatedAt'> = {
      ...restOfCourse,
      title: `${courseToDuplicate.title} (Copy)`,
      status: 'Draft', // Duplicated courses start as Draft
    };
    return await createCourse(duplicatedCourseInput);
  } catch (error) {
    console.error('Error duplicating course:', error);
    throw error;
  }
}

export async function setCourseStatus(id: string, status: CourseStatus): Promise<void> {
  try {
    const courseRef = doc(db, COURSES_COLLECTION, id);
    await updateDoc(courseRef, {
      status,
      updatedAt: serverTimestamp(),
    });
  } catch (error) {
    console.error('Error setting course status:', error);
    throw error;
  }
}

export async function createTemplateCourse(): Promise<Course> {
  try {
    // Import getAuth to get current user
    const { getAuth } = await import('firebase/auth');
    const auth = getAuth();
    const currentUser = auth.currentUser;

    if (!currentUser) {
      throw new Error('User not authenticated');
    }

    // Create template course
    const templateCourseInput: Omit<Course, 'id' | 'createdAt' | 'updatedAt'> = {
      title: 'üöÄ Kh√≥a h·ªçc React.js t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao',
      desc: 'Kh√≥a h·ªçc to√†n di·ªán v·ªÅ React.js v·ªõi c√°c d·ª± √°n th·ª±c t·∫ø, t·ª´ nh·ªØng kh√°i ni·ªám c∆° b·∫£n ƒë·∫øn c√°c k·ªπ thu·∫≠t n√¢ng cao. H·ªçc vi√™n s·∫Ω ƒë∆∞·ª£c h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc ƒë·ªÉ x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i.',
      coverUrl: 'https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop',
      tags: ['React', 'JavaScript', 'Frontend', 'Web Development', 'Template'],
      status: 'Published',
      ownerUid: currentUser.uid,
    };

    const course = await createCourse(templateCourseInput);
    
    // Create template modules and lessons
    await createTemplateModulesAndLessons(course.id);
    
    return course;
  } catch (error) {
    console.error('Error creating template course:', error);
    throw error;
  }
}

async function createTemplateModulesAndLessons(courseId: string) {
  try {
    const modules = [
      {
        title: 'üìö Ch∆∞∆°ng 1: Gi·ªõi thi·ªáu v·ªÅ React',
        description: 'T√¨m hi·ªÉu v·ªÅ React, c√°ch ho·∫°t ƒë·ªông v√† m√¥i tr∆∞·ªùng ph√°t tri·ªÉn',
        order: 1,
        lessons: [
          {
            title: 'React l√† g√¨ v√† t·∫°i sao n√™n s·ª≠ d·ª•ng?',
            type: 'text',
            content: `# React l√† g√¨?

React l√† m·ªôt th∆∞ vi·ªán JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Facebook ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng (UI). React gi√∫p b·∫°n t·∫°o ra c√°c ·ª©ng d·ª•ng web nhanh ch√≥ng v√† d·ªÖ b·∫£o tr√¨.

## T·∫°i sao n√™n s·ª≠ d·ª•ng React?

### 1. **Component-based Architecture**
- T√°i s·ª≠ d·ª•ng code d·ªÖ d√†ng
- D·ªÖ b·∫£o tr√¨ v√† m·ªü r·ªông
- T√°ch bi·ªát logic v√† UI

### 2. **Virtual DOM**
- C·∫£i thi·ªán hi·ªáu su·∫•t
- C·∫≠p nh·∫≠t UI nhanh ch√≥ng
- T·ªëi ∆∞u h√≥a rendering

### 3. **Ecosystem phong ph√∫**
- Nhi·ªÅu th∆∞ vi·ªán h·ªó tr·ª£
- C·ªông ƒë·ªìng l·ªõn m·∫°nh
- T√†i li·ªáu ƒë·∫ßy ƒë·ªß

### 4. **JSX Syntax**
- Vi·∫øt HTML trong JavaScript
- Code d·ªÖ ƒë·ªçc v√† hi·ªÉu
- H·ªó tr·ª£ TypeScript

## Khi n√†o n√™n s·ª≠ d·ª•ng React?

- X√¢y d·ª±ng Single Page Applications (SPA)
- ·ª®ng d·ª•ng c√≥ nhi·ªÅu t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
- C·∫ßn hi·ªáu su·∫•t cao
- Team c√≥ kinh nghi·ªám JavaScript

## B√†i t·∫≠p th·ª±c h√†nh

**Nhi·ªám v·ª•**: T·∫°o m·ªôt component React ƒë∆°n gi·∫£n hi·ªÉn th·ªã "Hello, World!"

**H∆∞·ªõng d·∫´n**:
1. M·ªü file App.js trong d·ª± √°n React
2. Thay th·∫ø n·ªôi dung b·∫±ng code sau:

\`\`\`jsx
import React from 'react';

function App() {
  return (
    <div className="App">
      <h1>Hello, World!</h1>
      <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi React!</p>
    </div>
  );
}

export default App;
\`\`\`

3. L∆∞u file v√† xem k·∫øt qu·∫£ trong browser

**K·∫øt qu·∫£ mong ƒë·ª£i**: Trang web hi·ªÉn th·ªã "Hello, World!" v√† "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi React!"`,
            order: 1,
          },
          {
            title: 'C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ph√°t tri·ªÉn',
            type: 'text',
            content: `# C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ph√°t tri·ªÉn React

## Y√™u c·∫ßu h·ªá th·ªëng

### 1. **Node.js**
- Phi√™n b·∫£n: 16.0 tr·ªü l√™n
- T·∫£i v·ªÅ: [nodejs.org](https://nodejs.org)

### 2. **npm ho·∫∑c yarn**
- npm: ƒëi k√®m v·ªõi Node.js
- yarn: c√†i ƒë·∫∑t ri√™ng n·∫øu mu·ªën

### 3. **Code Editor**
- Visual Studio Code (khuy·∫øn ngh·ªã)
- WebStorm
- Sublime Text

## T·∫°o d·ª± √°n React m·ªõi

### S·ª≠ d·ª•ng Create React App
\`\`\`bash
npx create-react-app my-app
cd my-app
npm start
\`\`\`

### S·ª≠ d·ª•ng Vite (khuy·∫øn ngh·ªã)
\`\`\`bash
npm create vite@latest my-app -- --template react
cd my-app
npm install
npm run dev
\`\`\`

## C·∫•u tr√∫c th∆∞ m·ª•c

\`\`\`
my-app/
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îî‚îÄ‚îÄ favicon.ico
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ App.js
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md
\`\`\`

## C√†i ƒë·∫∑t extensions cho VS Code

- ES7+ React/Redux/React-Native snippets
- Prettier - Code formatter
- ESLint
- Auto Rename Tag
- Bracket Pair Colorizer

## B√†i t·∫≠p th·ª±c h√†nh

**Nhi·ªám v·ª•**: T·∫°o d·ª± √°n React ƒë·∫ßu ti√™n c·ªßa b·∫°n

**H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc**:

1. **Ki·ªÉm tra Node.js**:
   \`\`\`bash
   node --version
   npm --version
   \`\`\`

2. **T·∫°o d·ª± √°n m·ªõi**:
   \`\`\`bash
   npx create-react-app my-first-react-app
   cd my-first-react-app
   \`\`\`

3. **Ch·∫°y d·ª± √°n**:
   \`\`\`bash
   npm start
   \`\`\`

4. **M·ªü browser** v√† truy c·∫≠p http://localhost:3000

**K·∫øt qu·∫£ mong ƒë·ª£i**: 
- Trang web React m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã
- Logo React xoay
- Text "Edit src/App.js and save to reload"
- Link "Learn React"

**L∆∞u √Ω**: N·∫øu g·∫∑p l·ªói, h√£y ki·ªÉm tra:
- Node.js ƒë√£ c√†i ƒë·∫∑t ch∆∞a
- K·∫øt n·ªëi internet ·ªïn ƒë·ªãnh
- Port 3000 ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng`,
            order: 2,
          },
          {
            title: 'Video: T·∫°o component ƒë·∫ßu ti√™n',
            type: 'video',
            content: 'https://www.youtube.com/watch?v=Ke90Tje7VS0',
            order: 3,
          },
        ],
      },
      {
        title: '‚öõÔ∏è Ch∆∞∆°ng 2: Components v√† JSX',
        description: 'H·ªçc c√°ch t·∫°o v√† s·ª≠ d·ª•ng components trong React',
        order: 2,
        lessons: [
          {
            title: 'T√¨m hi·ªÉu v·ªÅ JSX',
            type: 'text',
            content: `# JSX - JavaScript XML

JSX l√† m·ªôt extension syntax c·ªßa JavaScript cho ph√©p b·∫°n vi·∫øt HTML trong JavaScript.

## C√∫ ph√°p JSX c∆° b·∫£n

### 1. **Element ƒë∆°n gi·∫£n**
\`\`\`jsx
const element = <h1>Hello, World!</h1>;
\`\`\`

### 2. **Element v·ªõi attributes**
\`\`\`jsx
const element = <div className="container" id="main">Content</div>;
\`\`\`

### 3. **Element l·ªìng nhau**
\`\`\`jsx
const element = (
  <div>
    <h1>Title</h1>
    <p>Description</p>
  </div>
);
\`\`\`

## JavaScript trong JSX

### 1. **Expression**
\`\`\`jsx
const name = 'John';
const element = <h1>Hello, {name}!</h1>;
\`\`\`

### 2. **Function calls**
\`\`\`jsx
const element = <h1>Hello, {formatName(user)}!</h1>;
\`\`\`

### 3. **Conditional rendering**
\`\`\`jsx
const element = (
  <div>
    {isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please log in.</h1>}
  </div>
);
\`\`\`

## L∆∞u √Ω quan tr·ªçng

### 1. **className thay v√¨ class**
\`\`\`jsx
// ‚ùå Sai
<div class="container">

// ‚úÖ ƒê√∫ng
<div className="container">
\`\`\`

### 2. **CamelCase cho attributes**
\`\`\`jsx
// ‚ùå Sai
<div tabindex="1" onclick={handleClick}>

// ‚úÖ ƒê√∫ng
<div tabIndex="1" onClick={handleClick}>
\`\`\`

### 3. **Self-closing tags**
\`\`\`jsx
// ‚ùå Sai
<img src="image.jpg"></img>

// ‚úÖ ƒê√∫ng
<img src="image.jpg" />
\`\`\`

## B√†i t·∫≠p th·ª±c h√†nh

**Nhi·ªám v·ª•**: T·∫°o m·ªôt component JSX hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n

**H∆∞·ªõng d·∫´n**:
1. M·ªü file App.js
2. Thay th·∫ø n·ªôi dung b·∫±ng code sau:

\`\`\`jsx
import React from 'react';

function App() {
  const name = 'Nguy·ªÖn VƒÉn A';
  const age = 25;
  const city = 'H·ªì Ch√≠ Minh';
  const isStudent = true;

  return (
    <div className="App">
      <h1>Th√¥ng tin c√° nh√¢n</h1>
      <div className="profile">
        <h2>T√™n: {name}</h2>
        <p>Tu·ªïi: {age}</p>
        <p>Th√†nh ph·ªë: {city}</p>
        <p>Tr·∫°ng th√°i: {isStudent ? 'Sinh vi√™n' : 'ƒê√£ t·ªët nghi·ªáp'}</p>
      </div>
      
      <div className="skills">
        <h3>K·ªπ nƒÉng:</h3>
        <ul>
          <li>JavaScript</li>
          <li>React</li>
          <li>HTML/CSS</li>
        </ul>
      </div>
    </div>
  );
}

export default App;
\`\`\`

3. L∆∞u file v√† xem k·∫øt qu·∫£

**K·∫øt qu·∫£ mong ƒë·ª£i**: 
- Hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n v·ªõi t√™n, tu·ªïi, th√†nh ph·ªë
- Hi·ªÉn th·ªã tr·∫°ng th√°i sinh vi√™n
- Hi·ªÉn th·ªã danh s√°ch k·ªπ nƒÉng

**Th·ª≠ th√°ch**: Thay ƒë·ªïi c√°c gi√° tr·ªã bi·∫øn v√† xem k·∫øt qu·∫£ thay ƒë·ªïi nh∆∞ th·∫ø n√†o!`,
            order: 1,
          },
          {
            title: 'T·∫°o component ƒë·∫ßu ti√™n',
            type: 'text',
            content: `# T·∫°o Component ƒë·∫ßu ti√™n

## Function Component

### 1. **Component ƒë∆°n gi·∫£n**
\`\`\`jsx
function Welcome() {
  return <h1>Hello, World!</h1>;
}
\`\`\`

### 2. **Component v·ªõi props**
\`\`\`jsx
function Welcome(props) {
  return <h1>Hello, {props.name}!</h1>;
}
\`\`\`

### 3. **S·ª≠ d·ª•ng component**
\`\`\`jsx
function App() {
  return (
    <div>
      <Welcome name="Sara" />
      <Welcome name="Cahal" />
      <Welcome name="Edite" />
    </div>
  );
}
\`\`\`

## Class Component

\`\`\`jsx
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}
\`\`\`

## Component v·ªõi state

\`\`\`jsx
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = { date: new Date() };
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}
\`\`\`

## B√†i t·∫≠p th·ª±c h√†nh

**Nhi·ªám v·ª•**: T·∫°o m·ªôt component Card hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m

**H∆∞·ªõng d·∫´n**:
1. T·∫°o file m·ªõi: \`src/components/ProductCard.js\`
2. Th√™m code sau:

\`\`\`jsx
import React from 'react';

function ProductCard({ product }) {
  return (
    <div className="product-card">
      <img src={product.image} alt={product.name} />
      <h3>{product.name}</h3>
      <p className="price">\${product.price}</p>
      <p className="description">{product.description}</p>
      <button className="buy-button">Mua ngay</button>
    </div>
  );
}

export default ProductCard;
\`\`\`

3. S·ª≠ d·ª•ng component trong App.js:

\`\`\`jsx
import React from 'react';
import ProductCard from './components/ProductCard';

function App() {
  const products = [
    {
      id: 1,
      name: 'iPhone 15',
      price: 999,
      description: 'ƒêi·ªán tho·∫°i th√¥ng minh m·ªõi nh·∫•t',
      image: 'https://via.placeholder.com/200x200'
    },
    {
      id: 2,
      name: 'MacBook Pro',
      price: 1999,
      description: 'Laptop chuy√™n nghi·ªáp',
      image: 'https://via.placeholder.com/200x200'
    }
  ];

  return (
    <div className="App">
      <h1>Danh s√°ch s·∫£n ph·∫©m</h1>
      <div className="products">
        {products.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
}

export default App;
\`\`\`

4. Th√™m CSS ƒë·ªÉ l√†m ƒë·∫πp:

\`\`\`css
.product-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 16px;
  margin: 16px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.product-card img {
  width: 100%;
  height: 200px;
  object-fit: cover;
  border-radius: 4px;
}

.product-card h3 {
  margin: 12px 0;
  color: #333;
}

.price {
  font-size: 24px;
  font-weight: bold;
  color: #e74c3c;
  margin: 8px 0;
}

.buy-button {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.buy-button:hover {
  background-color: #2980b9;
}

.products {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}
\`\`\`

**K·∫øt qu·∫£ mong ƒë·ª£i**: 
- Hi·ªÉn th·ªã 2 s·∫£n ph·∫©m v·ªõi h√¨nh ·∫£nh, t√™n, gi√°, m√¥ t·∫£
- M·ªói s·∫£n ph·∫©m c√≥ n√∫t "Mua ngay"
- Layout ƒë·∫πp v·ªõi CSS

**Th·ª≠ th√°ch**: 
- Th√™m th√™m s·∫£n ph·∫©m v√†o m·∫£ng
- Thay ƒë·ªïi style CSS
- Th√™m ch·ª©c nƒÉng click v√†o n√∫t "Mua ngay"`,
            order: 2,
          },
          {
            title: 'Quiz: Ki·∫øn th·ª©c JSX',
            type: 'quiz',
            content: `{
  "question": "C√∫ ph√°p n√†o ƒë√∫ng trong JSX?",
  "options": [
    "class='container'",
    "className='container'",
    "class='container'",
    "className='container'"
  ],
  "correctAnswer": 1,
  "explanation": "Trong JSX, ch√∫ng ta s·ª≠ d·ª•ng 'className' thay v√¨ 'class' v√¨ 'class' l√† t·ª´ kh√≥a reserved trong JavaScript."
}`,
            order: 3,
          },
        ],
      },
      {
        title: 'üéØ Ch∆∞∆°ng 3: State v√† Props',
        description: 'Qu·∫£n l√Ω d·ªØ li·ªáu trong React components',
        order: 3,
        lessons: [
          {
            title: 'T√¨m hi·ªÉu v·ªÅ Props',
            type: 'text',
            content: `# Props trong React

Props (Properties) l√† c√°ch ƒë·ªÉ truy·ªÅn d·ªØ li·ªáu t·ª´ component cha xu·ªëng component con.

## C√°ch s·ª≠ d·ª•ng Props

### 1. **Truy·ªÅn props**
\`\`\`jsx
function App() {
  return <Welcome name="John" age={25} />;
}
\`\`\`

### 2. **Nh·∫≠n props**
\`\`\`jsx
function Welcome(props) {
  return (
    <div>
      <h1>Hello, {props.name}!</h1>
      <p>You are {props.age} years old.</p>
    </div>
  );
}
\`\`\`

### 3. **Destructuring props**
\`\`\`jsx
function Welcome({ name, age }) {
  return (
    <div>
      <h1>Hello, {name}!</h1>
      <p>You are {age} years old.</p>
    </div>
  );
}
\`\`\`

## Default Props

\`\`\`jsx
function Welcome({ name = 'Guest', age = 0 }) {
  return (
    <div>
      <h1>Hello, {name}!</h1>
      <p>You are {age} years old.</p>
    </div>
  );
}
\`\`\`

## PropTypes (TypeScript)

\`\`\`tsx
interface WelcomeProps {
  name: string;
  age: number;
  isActive?: boolean;
}

function Welcome({ name, age, isActive = false }: WelcomeProps) {
  return (
    <div>
      <h1>Hello, {name}!</h1>
      <p>You are {age} years old.</p>
      {isActive && <p>Status: Active</p>}
    </div>
  );
}
\`\`\`

## B√†i t·∫≠p th·ª±c h√†nh

**Nhi·ªám v·ª•**: T·∫°o component UserCard hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng

**H∆∞·ªõng d·∫´n**:
1. T·∫°o file \`src/components/UserCard.js\`:

\`\`\`jsx
import React from 'react';

function UserCard({ user, onEdit, onDelete }) {
  return (
    <div className="user-card">
      <div className="avatar">
        <img src={user.avatar} alt={user.name} />
      </div>
      <div className="user-info">
        <h3>{user.name}</h3>
        <p className="email">{user.email}</p>
        <p className="role">Role: {user.role}</p>
        <p className="status">
          Status: <span className={user.isActive ? 'active' : 'inactive'}>
            {user.isActive ? 'Active' : 'Inactive'}
          </span>
        </p>
      </div>
      <div className="actions">
        <button onClick={() => onEdit(user.id)}>Edit</button>
        <button onClick={() => onDelete(user.id)}>Delete</button>
      </div>
    </div>
  );
}

export default UserCard;
\`\`\`

2. S·ª≠ d·ª•ng trong App.js:

\`\`\`jsx
import React, { useState } from 'react';
import UserCard from './components/UserCard';

function App() {
  const [users] = useState([
    {
      id: 1,
      name: 'Nguy·ªÖn VƒÉn A',
      email: 'a@example.com',
      role: 'Admin',
      isActive: true,
      avatar: 'https://via.placeholder.com/100x100'
    },
    {
      id: 2,
      name: 'Tr·∫ßn Th·ªã B',
      email: 'b@example.com',
      role: 'User',
      isActive: false,
      avatar: 'https://via.placeholder.com/100x100'
    }
  ]);

  const handleEdit = (userId) => {
    console.log('Edit user:', userId);
  };

  const handleDelete = (userId) => {
    console.log('Delete user:', userId);
  };

  return (
    <div className="App">
      <h1>Danh s√°ch ng∆∞·ªùi d√πng</h1>
      <div className="users">
        {users.map(user => (
          <UserCard 
            key={user.id} 
            user={user} 
            onEdit={handleEdit}
            onDelete={handleDelete}
          />
        ))}
      </div>
    </div>
  );
}

export default App;
\`\`\`

3. Th√™m CSS:

\`\`\`css
.user-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 16px;
  margin: 16px;
  display: flex;
  align-items: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.avatar img {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  margin-right: 16px;
}

.user-info {
  flex: 1;
}

.user-info h3 {
  margin: 0 0 8px 0;
  color: #333;
}

.user-info p {
  margin: 4px 0;
  color: #666;
}

.active {
  color: #27ae60;
  font-weight: bold;
}

.inactive {
  color: #e74c3c;
  font-weight: bold;
}

.actions button {
  margin-left: 8px;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.actions button:first-child {
  background-color: #3498db;
  color: white;
}

.actions button:last-child {
  background-color: #e74c3c;
  color: white;
}

.users {
  display: flex;
  flex-wrap: wrap;
}
\`\`\`

**K·∫øt qu·∫£ mong ƒë·ª£i**: 
- Hi·ªÉn th·ªã 2 user card v·ªõi avatar, th√¥ng tin, v√† n√∫t action
- User active c√≥ m√†u xanh, inactive c√≥ m√†u ƒë·ªè
- Click n√∫t Edit/Delete s·∫Ω log ra console

**Th·ª≠ th√°ch**: 
- Th√™m th√™m user v√†o m·∫£ng
- Thay ƒë·ªïi style CSS
- Th√™m ch·ª©c nƒÉng th·ª±c s·ª± cho n√∫t Edit/Delete`,
            order: 1,
          },
          {
            title: 'State trong React',
            type: 'text',
            content: `# State trong React

State l√† d·ªØ li·ªáu c√≥ th·ªÉ thay ƒë·ªïi trong component. Khi state thay ƒë·ªïi, component s·∫Ω re-render.

## useState Hook

### 1. **State ƒë∆°n gi·∫£n**
\`\`\`jsx
import { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
\`\`\`

### 2. **State v·ªõi object**
\`\`\`jsx
function UserProfile() {
  const [user, setUser] = useState({
    name: 'John',
    age: 25,
    email: 'john@example.com'
  });

  const updateName = () => {
    setUser({ ...user, name: 'Jane' });
  };

  return (
    <div>
      <h1>{user.name}</h1>
      <p>Age: {user.age}</p>
      <p>Email: {user.email}</p>
      <button onClick={updateName}>Update Name</button>
    </div>
  );
}
\`\`\`

### 3. **State v·ªõi array**
\`\`\`jsx
function TodoList() {
  const [todos, setTodos] = useState([]);
  const [inputValue, setInputValue] = useState('');

  const addTodo = () => {
    if (inputValue.trim()) {
      setTodos([...todos, { id: Date.now(), text: inputValue }]);
      setInputValue('');
    }
  };

  return (
    <div>
      <input
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="Add todo"
      />
      <button onClick={addTodo}>Add</button>
      <ul>
        {todos.map(todo => (
          <li key={todo.id}>{todo.text}</li>
        ))}
      </ul>
    </div>
  );
}
\`\`\`

## B√†i t·∫≠p th·ª±c h√†nh

**Nhi·ªám v·ª•**: T·∫°o ·ª©ng d·ª•ng Todo List ho√†n ch·ªânh

**H∆∞·ªõng d·∫´n**:
1. T·∫°o file \`src/components/TodoApp.js\`:

\`\`\`jsx
import React, { useState } from 'react';

function TodoApp() {
  const [todos, setTodos] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [filter, setFilter] = useState('all');

  const addTodo = () => {
    if (inputValue.trim()) {
      const newTodo = {
        id: Date.now(),
        text: inputValue,
        completed: false,
        createdAt: new Date()
      };
      setTodos([...todos, newTodo]);
      setInputValue('');
    }
  };

  const toggleTodo = (id) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  const deleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  const filteredTodos = todos.filter(todo => {
    if (filter === 'active') return !todo.completed;
    if (filter === 'completed') return todo.completed;
    return true;
  });

  const completedCount = todos.filter(todo => todo.completed).length;
  const totalCount = todos.length;

  return (
    <div className="todo-app">
      <h1>Todo List</h1>
      
      <div className="add-todo">
        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && addTodo()}
          placeholder="Th√™m c√¥ng vi·ªác m·ªõi..."
        />
        <button onClick={addTodo}>Th√™m</button>
      </div>

      <div className="filters">
        <button 
          className={filter === 'all' ? 'active' : ''}
          onClick={() => setFilter('all')}
        >
          T·∫•t c·∫£ ({totalCount})
        </button>
        <button 
          className={filter === 'active' ? 'active' : ''}
          onClick={() => setFilter('active')}
        >
          Ch∆∞a ho√†n th√†nh ({totalCount - completedCount})
        </button>
        <button 
          className={filter === 'completed' ? 'active' : ''}
          onClick={() => setFilter('completed')}
        >
          ƒê√£ ho√†n th√†nh ({completedCount})
        </button>
      </div>

      <div className="todo-list">
        {filteredTodos.length === 0 ? (
          <p className="empty">Kh√¥ng c√≥ c√¥ng vi·ªác n√†o</p>
        ) : (
          filteredTodos.map(todo => (
            <div key={todo.id} className={\`todo-item \${todo.completed ? 'completed' : ''}\`}>
              <input
                type="checkbox"
                checked={todo.completed}
                onChange={() => toggleTodo(todo.id)}
              />
              <span className="todo-text">{todo.text}</span>
              <button 
                className="delete-btn"
                onClick={() => deleteTodo(todo.id)}
              >
                X√≥a
              </button>
            </div>
          ))
        )}
      </div>

      {totalCount > 0 && (
        <div className="stats">
          <p>T·ªïng c·ªông: {totalCount} c√¥ng vi·ªác</p>
          <p>ƒê√£ ho√†n th√†nh: {completedCount} c√¥ng vi·ªác</p>
          <p>Ti·∫øn ƒë·ªô: {Math.round((completedCount / totalCount) * 100)}%</p>
        </div>
      )}
    </div>
  );
}

export default TodoApp;
\`\`\`

2. Th√™m CSS:

\`\`\`css
.todo-app {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.todo-app h1 {
  text-align: center;
  color: #333;
  margin-bottom: 30px;
}

.add-todo {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.add-todo input {
  flex: 1;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
}

.add-todo button {
  padding: 12px 24px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.add-todo button:hover {
  background-color: #45a049;
}

.filters {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.filters button {
  padding: 8px 16px;
  border: 1px solid #ddd;
  background-color: white;
  border-radius: 4px;
  cursor: pointer;
}

.filters button.active {
  background-color: #007bff;
  color: white;
}

.todo-list {
  margin-bottom: 20px;
}

.todo-item {
  display: flex;
  align-items: center;
  padding: 12px;
  border: 1px solid #eee;
  border-radius: 4px;
  margin-bottom: 8px;
  background-color: white;
}

.todo-item.completed {
  opacity: 0.6;
}

.todo-item.completed .todo-text {
  text-decoration: line-through;
}

.todo-item input[type="checkbox"] {
  margin-right: 12px;
  transform: scale(1.2);
}

.todo-text {
  flex: 1;
  font-size: 16px;
}

.delete-btn {
  background-color: #f44336;
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.delete-btn:hover {
  background-color: #da190b;
}

.empty {
  text-align: center;
  color: #666;
  font-style: italic;
  padding: 40px;
}

.stats {
  background-color: #f8f9fa;
  padding: 15px;
  border-radius: 4px;
  text-align: center;
}

.stats p {
  margin: 5px 0;
  color: #666;
}
\`\`\`

3. S·ª≠ d·ª•ng trong App.js:

\`\`\`jsx
import React from 'react';
import TodoApp from './components/TodoApp';

function App() {
  return (
    <div className="App">
      <TodoApp />
    </div>
  );
}

export default App;
\`\`\`

**K·∫øt qu·∫£ mong ƒë·ª£i**: 
- ·ª®ng d·ª•ng Todo List ho√†n ch·ªânh v·ªõi th√™m, x√≥a, ƒë√°nh d·∫•u ho√†n th√†nh
- Filter theo tr·∫°ng th√°i (t·∫•t c·∫£, ch∆∞a ho√†n th√†nh, ƒë√£ ho√†n th√†nh)
- Th·ªëng k√™ ti·∫øn ƒë·ªô ho√†n th√†nh
- Giao di·ªán ƒë·∫πp v√† responsive

**Th·ª≠ th√°ch**: 
- Th√™m ch·ª©c nƒÉng s·ª≠a todo
- Th√™m ch·ª©c nƒÉng l∆∞u v√†o localStorage
- Th√™m ch·ª©c nƒÉng s·∫Øp x·∫øp theo ng√†y t·∫°o`,
            order: 2,
          },
          {
            title: 'PDF: T√†i li·ªáu tham kh·∫£o State v√† Props',
            type: 'pdf',
            content: 'https://reactjs.org/docs/state-and-lifecycle.html',
            order: 3,
          },
        ],
      },
      {
        title: 'üîÑ Ch∆∞∆°ng 4: Hooks n√¢ng cao',
        description: 'S·ª≠ d·ª•ng c√°c hooks ph·ªï bi·∫øn trong React',
        order: 4,
        lessons: [
          {
            title: 'useEffect Hook',
            type: 'text',
            content: `# useEffect Hook

useEffect cho ph√©p b·∫°n th·ª±c hi·ªán side effects trong function components.

## C√∫ ph√°p c∆° b·∫£n

\`\`\`jsx
import { useState, useEffect } from 'react';

function Example() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    document.title = \`You clicked \${count} times\`;
  });

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
\`\`\`

## Dependency Array

### 1. **Ch·∫°y sau m·ªói render**
\`\`\`jsx
useEffect(() => {
  // Ch·∫°y sau m·ªói render
});
\`\`\`

### 2. **Ch·∫°y m·ªôt l·∫ßn duy nh·∫•t**
\`\`\`jsx
useEffect(() => {
  // Ch·ªâ ch·∫°y m·ªôt l·∫ßn sau mount
}, []);
\`\`\`

### 3. **Ch·∫°y khi dependency thay ƒë·ªïi**
\`\`\`jsx
useEffect(() => {
  // Ch·∫°y khi count thay ƒë·ªïi
}, [count]);
\`\`\`

## Cleanup function

\`\`\`jsx
useEffect(() => {
  const timer = setInterval(() => {
    console.log('Timer tick');
  }, 1000);

  return () => {
    clearInterval(timer);
  };
}, []);
\`\`\``,
            order: 1,
          },
          {
            title: 'useContext v√† useReducer',
            type: 'text',
            content: `# useContext v√† useReducer

## useContext

useContext cho ph√©p b·∫°n s·ª≠ d·ª•ng Context API m·ªôt c√°ch d·ªÖ d√†ng.

### 1. **T·∫°o Context**
\`\`\`jsx
import { createContext, useContext } from 'react';

const ThemeContext = createContext();

function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('light');

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}
\`\`\`

### 2. **S·ª≠ d·ª•ng Context**
\`\`\`jsx
function ThemedButton() {
  const { theme, setTheme } = useContext(ThemeContext);

  return (
    <button
      style={{ background: theme === 'light' ? '#fff' : '#333' }}
      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
    >
      Toggle Theme
    </button>
  );
}
\`\`\`

## useReducer

useReducer l√† m·ªôt alternative cho useState khi state ph·ª©c t·∫°p.

### 1. **Reducer function**
\`\`\`jsx
function counterReducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    case 'reset':
      return { count: 0 };
    default:
      throw new Error();
  }
}
\`\`\`

### 2. **S·ª≠ d·ª•ng useReducer**
\`\`\`jsx
function Counter() {
  const [state, dispatch] = useReducer(counterReducer, { count: 0 });

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>
    </div>
  );
}
\`\`\``,
            order: 2,
          },
        ],
      },
      {
        title: 'üöÄ Ch∆∞∆°ng 5: D·ª± √°n th·ª±c t·∫ø',
        description: 'X√¢y d·ª±ng ·ª©ng d·ª•ng Todo App ho√†n ch·ªânh',
        order: 5,
        lessons: [
          {
            title: 'Thi·∫øt k·∫ø ·ª©ng d·ª•ng Todo',
            type: 'text',
            content: `# Thi·∫øt k·∫ø ·ª©ng d·ª•ng Todo

## Y√™u c·∫ßu ch·ª©c nƒÉng

### 1. **Qu·∫£n l√Ω Todo**
- Th√™m todo m·ªõi
- ƒê√°nh d·∫•u ho√†n th√†nh
- X√≥a todo
- Ch·ªânh s·ª≠a todo

### 2. **L·ªçc v√† t√¨m ki·∫øm**
- L·ªçc theo tr·∫°ng th√°i (All, Active, Completed)
- T√¨m ki·∫øm theo n·ªôi dung

### 3. **Th·ªëng k√™**
- Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng todo
- Hi·ªÉn th·ªã ti·∫øn ƒë·ªô ho√†n th√†nh

## C·∫•u tr√∫c component

\`\`\`
TodoApp/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ TodoForm.jsx
‚îÇ   ‚îú‚îÄ‚îÄ TodoList.jsx
‚îÇ   ‚îú‚îÄ‚îÄ TodoItem.jsx
‚îÇ   ‚îú‚îÄ‚îÄ TodoFilter.jsx
‚îÇ   ‚îî‚îÄ‚îÄ TodoStats.jsx
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useTodos.js
‚îÇ   ‚îî‚îÄ‚îÄ useLocalStorage.js
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ todoUtils.js
‚îî‚îÄ‚îÄ App.jsx
\`\`\`

## State Management

\`\`\`jsx
const [todos, setTodos] = useState([]);
const [filter, setFilter] = useState('all');
const [searchTerm, setSearchTerm] = useState('');
\`\`\``,
            order: 1,
          },
          {
            title: 'Video: X√¢y d·ª±ng Todo App',
            type: 'video',
            content: 'https://www.youtube.com/watch?v=Ke90Tje7VS0',
            order: 2,
          },
          {
            title: 'Quiz: Ki·ªÉm tra ki·∫øn th·ª©c',
            type: 'quiz',
            content: `{
  "question": "Hook n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ qu·∫£n l√Ω state trong function component?",
  "options": [
    "useState",
    "useEffect", 
    "useContext",
    "useReducer"
  ],
  "correctAnswer": 0,
  "explanation": "useState l√† hook c∆° b·∫£n nh·∫•t ƒë·ªÉ qu·∫£n l√Ω state trong function component. N√≥ cho ph√©p b·∫°n th√™m state v√†o function component v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng v·ªõi 2 ph·∫ßn t·ª≠: gi√° tr·ªã hi·ªán t·∫°i c·ªßa state v√† function ƒë·ªÉ c·∫≠p nh·∫≠t state."
}`,
            order: 3,
          },
        ],
      },
    ];

    // Create modules
    for (const moduleData of modules) {
      const { lessons, ...moduleInfo } = moduleData;
      const moduleRef = await addDoc(collection(db, 'modules'), {
        ...moduleInfo,
        courseId,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
      });

      // Create lessons for this module
      for (const lessonData of lessons) {
        await addDoc(collection(db, 'lessons'), {
          ...lessonData,
          moduleId: moduleRef.id,
          courseId,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp(),
        });
      }
    }
  } catch (error) {
    console.error('Error creating template modules and lessons:', error);
    throw error;
  }
}
